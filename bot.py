import os
import telebot
import requests
import random
from deep_translator import GoogleTranslator

bot = telebot.TeleBot(os.getenv("BOT_TOKEN"))

@bot.message_handler(commands=['start'])
def main(message):
    bot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç!üòä\n–ù–∞–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /help —á—Ç–æ–±—ã –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏ –Ω–∞—à–µ–≥–æ –∫—É–ª–∏–Ω–∞—Ä–Ω–æ–≥–æ –ø–æ–º–æ—â–Ω–∏–∫–∞.')

@bot.message_handler(commands=['help'])
def main(message):
    bot.send_message(message.chat.id, '–ß—Ç–æ —è —É–º–µ—é:\n–£ —Ç–µ–±—è –µ—Å—Ç—å –∫–∞–∫–∏–µ-—Ç–æ –ø—Ä–æ–¥—É–∫—Ç—ã, –Ω–æ –Ω–µ –∑–Ω–∞–µ—à—å, —á—Ç–æ –∏–∑ –Ω–∏—Ö –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å?\n–ü–∏—à–∏ —Å–ø–∏—Å–æ–∫, –∏ —è –Ω–∞–π–¥—É –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —Ä–µ—Ü–µ–ø—Ç—ã.\n–ù–∞–¥–µ—é—Å—å, –º—ã —Å—Ç–∞–Ω–µ–º –æ—Ç–ª–∏—á–Ω—ã–º–∏ –ø–æ–º–æ—â–Ω–∏–∫–∞–º–∏ –¥—Ä—É–≥ –¥—Ä—É–≥—É –Ω–∞ –∫—É—Ö–Ω–µ!\n–û—Ç–ø—Ä–∞–≤—å –∫–æ–º–∞–Ω–¥—É /recipe, –∏ —è –ø–æ–∫–∞–∂—É —Ç–µ–±–µ —á—Ç–æ –º–æ–∂–Ω–æ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å.')

@bot.message_handler(commands=['recipe'])
def main(message):
    bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç—ã...')

@bot.message_handler(func=lambda message: True)
def get_recipe(message):
    user_input_ru = message.text

    if not user_input_ru.strip():
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –ø—Ä–æ–¥—É–∫—Ç.")
        return

    try:
        user_input_en = GoogleTranslator(source='auto', target='en').translate(user_input_ru)
        user_input_en = user_input_en.lower().replace(" ", "")
    except Exception:
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤.")
        return

    ingredients = user_input_en.split(',')

    if not ingredients or not any(ingredients):
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –ø—Ä–æ–¥—É–∫—Ç.")
        return

    all_meals = []

    for ingredient in ingredients:
        ingredient = ingredient.strip()
        if ingredient:
            response = requests.get(f"https://www.themealdb.com/api/json/v1/1/filter.php?i={ingredient}")
            if response.status_code == 200:
                data = response.json()
                meals = data.get('meals', [])
                if meals:
                    all_meals.extend(meals)

    if all_meals:
        meal = random.choice(all_meals)
        meal_name = meal['strMeal']
        meal_thumb = meal['strMealThumb']
        meal_id = meal['idMeal']

        details_response = requests.get(f"https://www.themealdb.com/api/json/v1/1/lookup.php?i={meal_id}")
        if details_response.status_code == 200:
            details_data = details_response.json()
            instructions = details_data['meals'][0]['strInstructions']

            try:
                meal_name_ru = GoogleTranslator(source='en', target='ru').translate(meal_name)
                instructions_ru = GoogleTranslator(source='en', target='ru').translate(instructions)

                if meal_name:
                    bot.send_message(message.chat.id, f"–í–æ—Ç —á—Ç–æ –º–æ–∂–Ω–æ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å: *{meal_name_ru}*", parse_mode='Markdown')
                    if instructions:
                        bot.send_message(message.chat.id, f"–†–µ—Ü–µ–ø—Ç:\n{instructions_ru}", parse_mode='Markdown')
                        bot.send_photo(message.chat.id, meal_thumb)
                    else:
                        bot.send_message(message.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç.")
                else:
                    bot.send_message(message.chat.id, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ —ç—Ç–∏–º –ø—Ä–æ–¥—É–∫—Ç–∞–º.")
            except Exception:
                bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ —Ä–µ—Ü–µ–ø—Ç–∞.")
    else:
        bot.send_message(message.chat.id, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ —ç—Ç–∏–º –ø—Ä–æ–¥—É–∫—Ç–∞–º.")

bot.polling(none_stop=True)
